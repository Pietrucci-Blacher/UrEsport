definitions:
  models.CreateFeatureDto:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  models.CreateTournamentDto:
    properties:
      description:
        type: string
      end_date:
        type: string
      image:
        type: string
      location:
        type: string
      name:
        type: string
      private:
        type: boolean
      start_date:
        type: string
    required:
    - description
    - end_date
    - image
    - location
    - name
    - start_date
    type: object
  models.CreateUserDto:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    - username
    type: object
  models.Feature:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.InviteUserDto:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  models.LoginUserDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SanitizedTournament:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      image:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        type: integer
      participants:
        items:
          $ref: '#/definitions/models.SanitizedUser'
        type: array
      private:
        type: boolean
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  models.SanitizedUser:
    properties:
      created_at:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.Token:
    properties:
      created_at:
        type: string
      id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Tournament:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      image:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        type: integer
      participants:
        items:
          $ref: '#/definitions/models.User'
        type: array
      private:
        type: boolean
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  models.UpdateFeatureDto:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  models.UpdateTournamentDto:
    properties:
      description:
        type: string
      end_date:
        type: string
      image:
        type: string
      location:
        type: string
      name:
        type: string
      start_date:
        type: string
    type: object
  models.UpdateUserDto:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      tournaments:
        items:
          $ref: '#/definitions/models.Tournament'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  utils.HttpError:
    properties:
      error:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login user
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: Logout user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register user
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: Register user
      tags:
      - auth
  /features/:
    get:
      consumes:
      - application/json
      description: get all features
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Feature'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: get all features
      tags:
      - feature
    post:
      consumes:
      - application/json
      description: create features
      parameters:
      - description: Feature
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/models.CreateFeatureDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Feature'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: create features
      tags:
      - feature
  /features/{id}:
    delete:
      consumes:
      - application/json
      description: delete features by id
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: delete features by id
      tags:
      - feature
    get:
      consumes:
      - application/json
      description: get features by id
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Feature'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: get features by id
      tags:
      - feature
    patch:
      consumes:
      - application/json
      description: update features
      parameters:
      - description: Feature
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/models.UpdateFeatureDto'
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Feature'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: update features
      tags:
      - feature
  /features/{id}/toggle:
    get:
      consumes:
      - application/json
      description: toggle features by id
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Feature'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: toggle features by id
      tags:
      - feature
  /tournaments/:
    get:
      consumes:
      - application/json
      description: get all tournaments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SanitizedTournament'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: get all tournaments
      tags:
      - tournament
    post:
      consumes:
      - application/json
      description: create tournament
      parameters:
      - description: Tournament
        in: body
        name: tournament
        required: true
        schema:
          $ref: '#/definitions/models.CreateTournamentDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tournament'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: create tournament
      tags:
      - tournament
  /tournaments/{id}:
    delete:
      description: delete tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: delete tournament
      tags:
      - tournament
    get:
      consumes:
      - application/json
      description: get tournament by id
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SanitizedTournament'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: get tournament by id
      tags:
      - tournament
    patch:
      consumes:
      - application/json
      description: update tournament
      parameters:
      - description: Tournament
        in: body
        name: tournament
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTournamentDto'
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tournament'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: update tournament
      tags:
      - tournament
  /tournaments/{id}/invite:
    post:
      description: invite user to your tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      - description: Invite
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/models.InviteUserDto'
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: invite user to your tournament
      tags:
      - tournament
  /tournaments/{id}/join:
    post:
      description: join yourself to a tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: join yourself to a tournament
      tags:
      - tournament
  /tournaments/{id}/kick:
    delete:
      description: kick user from your tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      - description: Kick
        in: body
        name: kick
        required: true
        schema:
          $ref: '#/definitions/models.InviteUserDto'
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: kick user from your tournament
      tags:
      - tournament
  /tournaments/{id}/leave:
    delete:
      description: leave yourself from a tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: leave yourself from a tournament
      tags:
      - tournament
  /tournaments/{id}/toggle-private:
    patch:
      description: toggle tournament privacy
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: toggle tournament privacy
      tags:
      - tournament
  /users/:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: get all users
      tags:
      - user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: delete user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: get users by id
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: get users by id
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserDto'
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: update user
      tags:
      - user
  /users/me:
    get:
      consumes:
      - application/json
      description: get connected user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: get connected user
      tags:
      - user
swagger: "2.0"
