package controllers

import (
	"challenge/docs"
	"challenge/middlewares"
	"challenge/models"
	"challenge/utils"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func RegisterRoutes(r *gin.Engine) {
	docs.SwaggerInfo.Title = "UrEsport API"
	docs.SwaggerInfo.Description = "This is a sample server for UrEsport API."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "fr.uresport.api"
	docs.SwaggerInfo.BasePath = "/v2"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	api := r.Group("/")
	{
		api.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

		users := api.Group("/users")
		{
			users.GET("/",
				middlewares.IsLoggedIn(false),
				middlewares.QueryFilter(),
				GetUsers,
			)
			users.GET("/:user",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				GetUser,
			)
			users.POST("/:user/image",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.IsMe(),
				middlewares.FileUploader(utils.IMAGE, utils.SIZE_10MB),
				UploadUserImage,
			)
			users.PATCH("/:user",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.IsMe(),
				middlewares.Validate[models.UpdateUserDto](),
				UpdateUser,
			)
			users.DELETE("/:user",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.IsMe(),
				DeleteUser,
			)
			users.GET("/me",
				middlewares.IsLoggedIn(true),
				GetUserMe,
			)
			users.GET("/:user/friends/",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.IsMe(),
				GetFriends,
			)
			users.GET("/:user/friends/:friend",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.Get[*models.User]("friend"),
				GetFriend,
			)
			users.POST("/:user/friends/:friend",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.Get[*models.User]("friend"),
				middlewares.IsMe(),
				AddFriend,
			)
			users.PATCH("/:user/friends/:friend",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.Get[*models.User]("friend"),
				middlewares.IsMe(),
				UpdateFriend,
			)
			users.DELETE("/:user/friends/:friend",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.User]("user"),
				middlewares.Get[*models.User]("friend"),
				middlewares.IsMe(),
				DeleteFriend,
			)
		}

		features := api.Group("/features")
		{
			features.GET("/", GetFeatures)
			features.POST("/",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Validate[models.CreateFeatureDto](),
				CreateFeature,
			)
			features.GET("/:feature",
				middlewares.Get[*models.Feature]("feature"),
				GetFeature,
			)
			features.GET("/:feature/toggle",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Get[*models.Feature]("feature"),
				ToggleFeature,
			)
			features.PATCH("/:feature",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Get[*models.Feature]("feature"),
				middlewares.Validate[models.UpdateFeatureDto](),
				UpdateFeature,
			)
			features.DELETE("/:feature",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Get[*models.Feature]("feature"),
				DeleteFeature,
			)
		}

		auth := api.Group("/auth")
		{
			auth.POST("/login",
				middlewares.Validate[models.LoginUserDto](),
				Login,
			)
			auth.POST("/register",
				middlewares.Validate[models.CreateUserDto](),
				Register,
			)
			auth.POST("/logout",
				middlewares.IsLoggedIn(true),
				Logout,
			)
			auth.POST("/refresh", Refresh)
			auth.POST("/verify",
				middlewares.Validate[models.VerifyUserDto](),
				Verify,
			)
			auth.POST("/request-verify",
				middlewares.Validate[models.RequestCodeDto](),
				RequestVerification,
			)
			auth.POST("/request-password-reset",
				middlewares.Validate[models.RequestCodeDto](),
				RequestPasswordReset,
			)
			auth.POST("/reset-password",
				middlewares.Validate[models.ResetPasswordDto](),
				ResetPassword,
			)
			auth.GET("/:provider/callback", OAuth2Callback)
		}

		tournaments := api.Group("/tournaments")
		{
			tournaments.GET("/",
				middlewares.QueryFilter(),
				GetTournaments,
			)
			tournaments.POST("/",
				middlewares.IsLoggedIn(true),
				middlewares.Validate[models.CreateTournamentDto](),
				CreateTournament,
			)
			tournaments.POST("/:tournament/image",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.IsTournamentOwner(),
				middlewares.FileUploader(utils.IMAGE, utils.SIZE_10MB),
				UploadTournamentImage,
			)
			tournaments.GET("/:tournament",
				middlewares.Get[*models.Tournament]("tournament"),
				GetTournament,
			)
			tournaments.PATCH("/:tournament",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.IsTournamentOwner(),
				middlewares.Validate[models.UpdateTournamentDto](),
				UpdateTournament,
			)
			tournaments.DELETE("/:tournament",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.IsTournamentOwner(),
				DeleteTournament,
			)
			tournaments.POST("/:tournament/team/:team/join",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				JoinTournament,
			)
			tournaments.POST("/:tournament/invite",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.IsTournamentOwner(),
				middlewares.Validate[models.InviteTeamDto](),
				InviteTeamToTournament,
			)
			tournaments.GET("/:tournament/team/:team/accept",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				AcceptTournamentInvitation,
			)
			tournaments.GET("/:tournament/team/:team/reject",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				RejectTournamentInvitation,
			)
			tournaments.DELETE("/:tournament/team/:team/leave",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				LeaveTournament,
			)
			tournaments.DELETE("/:tournament/kick",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.IsTournamentOwner(),
				middlewares.Validate[models.InviteTeamDto](),
				KickUserFromTournament,
			)
			tournaments.PATCH("/:tournament/toggle-private",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.IsTournamentOwner(),
				TogglePrivateTournament,
			)
			tournaments.POST("/:tournament/bracket",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.IsTournamentOwner(),
				GenerateTournamentBracket,
			)
			tournaments.GET("/:tournament/upvotes",
				middlewares.Get[*models.Tournament]("tournament"),
				GetTournamentUpvote,
			)
			tournaments.GET("/:tournament/upvotes/:userID",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Get[*models.User]("userID"),
				GetUpvoteById,
			)
			tournaments.POST("/:tournament/upvote",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				AddUpvote,
			)
			tournaments.GET("/:tournament/ratings",
				middlewares.QueryFilter(),
				middlewares.Get[*models.Tournament]("tournament"),
				GetRatings,
			)
			tournaments.GET("/:tournament/ratings/:rating",
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Get[*models.Rating]("rating"),
				GetRatingById,
			)
			tournaments.GET("/:tournament/rating",
				middlewares.Get[*models.Tournament]("tournament"),
				GetRating,
			)
			tournaments.POST("/:tournament/ratings",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Validate[models.CreateRatingDto](),
				CreateRating,
			)
			tournaments.PATCH("/:tournament/ratings/:rating",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Tournament]("tournament"),
				middlewares.Get[*models.Rating]("rating"),
				middlewares.IsRatingOwner(),
				middlewares.Validate[models.UpdateRatingDto](),
				UpdateRating,
			)
			tournaments.DELETE("/:tournament/ratings/:rating",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Rating]("rating"),
				middlewares.IsRatingOwner(),
				DeleteRating,
			)
		}

		teams := api.Group("/teams")
		{
			teams.GET("/",
				middlewares.QueryFilter(),
				GetTeams,
			)
			teams.POST("/",
				middlewares.IsLoggedIn(true),
				middlewares.Validate[models.CreateTeamDto](),
				CreateTeam,
			)
			teams.GET("/:team",
				middlewares.Get[*models.Team]("team"),
				GetTeam,
			)
			teams.GET("/user/:user",
				middlewares.Get[*models.User]("user"),
				GetUserTeams,
			)
			teams.PATCH("/:team",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				middlewares.Validate[models.UpdateTeamDto](),
				UpdateTeam,
			)
			teams.DELETE("/:team",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				DeleteTeam,
			)
			teams.POST("/:team/join",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				JoinTeam,
			)
			teams.DELETE("/:team/leave",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				LeaveTeam,
			)
			teams.POST("/:team/invite",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				middlewares.Validate[models.InviteUserDto](),
				InviteUserToTeam,
			)
			teams.GET("/:team/accept",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				AcceptTeamInvitation,
			)
			teams.GET("/:team/reject",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				RejectTeamInvitation,
			)
			teams.DELETE("/:team/kick",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				middlewares.Validate[models.InviteUserDto](),
				KickUserFromTeam,
			)
			teams.PATCH("/:team/toggle-private",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				TogglePrivateTeam,
			)
		}

		games := api.Group("/games")
		{
			games.GET("/",
				middlewares.QueryFilter(),
				GetGames,
			)
			games.POST("/",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Validate[models.CreateGameDto](),
				CreateGame,
			)
			games.GET("/:game",
				middlewares.Get[*models.Game]("game"),
				GetGame,
			)
			games.PATCH("/:game",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Get[*models.Game]("game"),
				middlewares.Validate[models.UpdateGameDto](),
				UpdateGame,
			)
			games.DELETE("/:game",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Get[*models.Game]("game"),
				DeleteGame,
			)
			games.POST("/:game/image",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Get[*models.Game]("game"),
				middlewares.FileUploader(utils.IMAGE, utils.SIZE_10MB),
				UploadGameImage,
			)
			games.GET("/:game/tournaments",
				middlewares.Get[*models.Game]("game"),
				GetTournamentsByGame,
			)

		}

		likes := api.Group("/likes")
		{
			likes.GET("/",
				middlewares.QueryFilter(),
				GetAllLikes,
			)
			likes.GET("/:id",
				middlewares.IsLoggedIn(true),
				GetLikeByID,
			)
			likes.GET("/user/:user/game/:game",
				middlewares.Get[*models.User]("user"),
				middlewares.Get[*models.Game]("game"),
				GetLikesByUserIDAndGameID,
			)
			likes.GET("/user/:user",
				middlewares.Get[*models.User]("user"),
				GetLikesByUserID,
			)
			likes.POST("/",
				middlewares.IsLoggedIn(true),
				middlewares.Validate[models.CreateLikeDto](),
				CreateLike,
			)
			likes.DELETE("/:like",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Like]("like"),
				DeleteLike,
			)
		}

		matches := api.Group("/matches")
		{
			matches.GET("/",
				middlewares.QueryFilter(),
				GetMatchs,
			)
			matches.GET("/:match",
				middlewares.Get[*models.Match]("match"),
				GetMatch,
			)
			matches.PATCH("/:match",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Match]("match"),
				middlewares.IsMatchTournmanentOwner(),
				middlewares.Validate[models.UpdateMatchDto](),
				UpdateMatch,
			)
			matches.PATCH("/:match/team/:team/score",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Match]("match"),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				middlewares.IsTeamInMatch(),
				middlewares.Validate[models.ScoreMatchDto](),
				ScoreMatch,
			)
			matches.PATCH("/:match/team/:team/close",
				middlewares.IsLoggedIn(true),
				middlewares.Get[*models.Match]("match"),
				middlewares.Get[*models.Team]("team"),
				middlewares.IsTeamOwner(),
				middlewares.IsTeamInMatch(),
				CloseMatch,
			)
		}

		invit := api.Group("/invit")
		{
			invit.GET("/tournaments/:inout",
				middlewares.IsLoggedIn(true),
				GetInvitTournament,
			)
			invit.GET("/teams/:inout",
				middlewares.IsLoggedIn(true),
				GetInvitTeam,
			)
		}

		logs := api.Group("/logs")
		{
			logs.GET("/",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.QueryFilter(),
				GetLogs,
			)
			logs.GET("/:log",
				middlewares.IsLoggedIn(true),
				middlewares.IsAdmin(),
				middlewares.Get[*models.Log]("log"),
				GetLog,
			)
		}
	}
}
