name: CD Pipeline

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - feature/cd-v2
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_and_push_docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2.0
        with:
          file_name: .env
          env_key_DB_HOST: ${{ secrets.DB_HOST }}
          env_key_DB_PORT: ${{ secrets.DB_PORT }}
          env_key_DB_USER: ${{ secrets.DB_USER }}
          env_key_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          env_key_DB_NAME: ${{ secrets.DB_NAME }}
          env_key_JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          env_key_COOKIE_SECURE: true
          env_key_RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          env_key_RESEND_SENDER: "noreply@uresport.fr"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Golang Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile-prod
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/uresports-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/uresports-api:latest
          cache-to: type=inline

  deploy_api_to_railway:
    needs: build_and_push_docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Railway CLI
        run: pnpm install -g @railway/cli

      - name: Deploy to Railway
        run: |
          railway up --service ${{ secrets.RAILWAY_SERVICE_API }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy_apk_and_ios_with_fastlane:
    needs: deploy_api_to_railway
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [ 'front/ios', 'front/android' ]
    defaults:
      run:
        working-directory: ${{ matrix.directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter Environment
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
          cache-key: 'flutter-${{ runner.os }}-${{ env.FLUTTER_CHANNEL }}-${{ env.CACHE_VERSION }}'
          cache-path: '${{ runner.tool_cache }}/flutter/${{ env.FLUTTER_CHANNEL }}'

      - name: Install dependencies
        run: flutter pub get

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Install Fastlane
        run: gem install fastlane

      - name: Deploy APK and iOS build with Fastlane
        run: |
          if [ "${{ matrix.directory }}" == "front/ios" ]; then
            bundle exec fastlane deploy_to_app_store
          elif [ "${{ matrix.directory }}" == "front/android" ]; then
            flutter build apk --release
            bundle exec fastlane deploy_to_play_store
          fi
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
          FASTLANE_TEAM_ID: ${{ secrets.FASTLANE_TEAM_ID }}
          FASTLANE_MATCH_PASSWORD: ${{ secrets.FASTLANE_MATCH_PASSWORD }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}



  deploy_web_to_vercel:
    needs: deploy_apk_and_ios_with_fastlane
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Build Flutter Web App
        run: flutter build web

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}