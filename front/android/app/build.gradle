plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.android.libraries.mapsplatform.secrets-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    ndkVersion "26.1.10909125"
    namespace 'fr.uresport'
    compileSdk flutter.compileSdkVersion
    ndkVersion "26.1.10909125"

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_21
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.uresport"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        multiDexEnabled true

        def mapsApiKey = System.env.MAPS_API_KEY ?: findDartDefineValue("MAPS_API_KEY") ?: ""
        manifestPlaceholders = [
                MAPS_API_KEY: mapsApiKey,
                applicationName: "fr.uresport"
        ]
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:2.0.4"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

secrets {
    defaultPropertiesFileName = "local.properties"

    // Ignore all keys matching the regexp "sdk.*"
    ignoreList.add("sdk.*")
    // Ignore all keys matching the regexp "flutter.*"
    ignoreList.add("flutter.*")
}

def findDartDefineValue(key) {
    def encodedDartDefines = project.hasProperty('dart-defines') ? project.property('dart-defines') : ""
    def defines = encodedDartDefines.split(",").collectEntries { String it ->
        def define = new String(it.decodeBase64(), 'UTF-8').split('=')
        return [(define.first()): define.last()]
    }
    return defines.containsKey(key) ? defines[key] : null
}
